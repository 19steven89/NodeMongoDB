can view the mongodb data by opening the Robo3T app in home directory

installed mongo db on the system. in the home directory.

when running the app through the terminal run the command: ./mongod --dbpath ~/mongo-data
in a separate terminal tab so mongodb can run whilst coding the app to use the db. This is from the
bin directory within the mongo folder.

installed the npm: npm install mongodb@2.2.5 --save
for this app to access the db server and manipulate the DB using the mongodb library

ran the program using: node playground/mongodb-connect.js

which displays the MongoDB content in the output

used count and toArray methods from the Node MongoDB driver API at the following url
URL: http://mongodb.github.io/node-mongodb-native/2.0/api/Cursor.html#count

this is useful for doing stuff with the collection of data in the MongoDB

used the following url which is the node mongodb documentation to increment the
age field in the users collection in mongodb
https://docs.mongodb.com/manual/reference/operator/update/inc/

added the express npm
also added body-parser npm using the following command:
npm i express@4.14.0 body-parser@1.15.2 --save

installed npm's for testing using: npm i expect@1.20.2 mocha@3.0.2 nodemon@1.10.2 supertest@2.0.0 --save-dev

npm uses:
expect for assertions
mocha for the entire test suite
supertest which is used to test the express routes


added these 2 lines to the package.json file for testing the app
"test": "mocha server/**/*.test.js",
"test-watch": "nodemon --exec 'npm test'"


in server.js implemented a route that handles an object Id sent by the users request,
this has been done in Postman by testing a GET request using the ObjectId 5b2ad8d5f1f1dad921d90de6
with the URL localhost:3000/todos/5b2ad8d5f1f1dad921d90de6. in the terminal it returns the mongodb
document for this ObjectId. And when an invalid ID is input the code in server,js
handles This by outputting to the user ID not found. such as by entering
localhost:3000/todos/123 in postman.

added the follwing line to the package.json file:  "start": "node server/server.js",
this tells heroku how to start the application

also added:   "engines": {
    "node": "9.11.2"
  }
to the package.json file so that Heroku knows which version of node i am using


in terminal used: heroku create
then: heroku addons:create mongolab:sandbox
This uses a mongodb with sandbox which uses mLab for cloud hosting MongoDB apps 
